apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "redis-cluster-helm.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ include "redis-cluster-helm.name" . }}
    helm.sh/chart: {{ include "redis-cluster-helm.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  serviceName: {{ include "redis-cluster-helm.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "redis-cluster-helm.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "redis-cluster-helm.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
          {{- if .Values.usePassword }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-secret
                  key: redis-password
          {{- else }}
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
          {{- end }}
            - name: REDIS_PORT
              value: "6379"
            - name: CLUSTER_REPLICAS
              value: {{ .Values.clusterReplicas | quote }}
          command:
          - /bin/bash
          - -c
          - |
            mkdir /var/lib/redis
            ARGS=("--port" "${REDIS_PORT}")
            {{- if .Values.usePassword }}
            ARGS+=("--requirepass" "${REDIS_PASSWORD}")
            {{- else }}
            ARGS+=("--protected-mode" "no")
            {{- end }}
            ARGS+=("--include" "/etc/redis/redis.conf")
            redis-server "${ARGS[@]}"
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
            - name: cluster
              containerPort: 16379
              protocol: TCP
          volumeMounts:
            - name: redis-config
              mountPath: /etc/redis
            - name: redis-data
              mountPath: /data
            - name: health
              mountPath: /health
          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_local.sh
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_local.sh
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
        - name: health
          configMap:
            name: redis-health
            defaultMode: 0755
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.storage }}
        {{- if .Values.persistence.storageClass }}
        storageClassName: {{ .Values.persistence.storageClass }}
        {{- end }}
